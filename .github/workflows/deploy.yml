name: Deploy to GitHub Pages

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production

    steps:
      - uses: actions/checkout@v4

      - name: Start timer
        id: t0
        run: echo "epoch=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Install jq & tools
        run: sudo apt-get update && sudo apt-get install -y jq moreutils

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: npm ci
        run: npm ci

      # Build (c√≥ inject key build-time n·∫øu c·∫ßn)
      - name: Build
        env:
          GEMINI_API_KEY: ${{ secrets.API_KEY }}
          API_KEY: ${{ secrets.API_KEY }}
        run: npm run build

      # SPA fix
      - name: Copy 404.html
        run: cp dist/index.html dist/404.html

      - name: Count & size dist
        id: distinfo
        run: |
          FILES=$(find dist -type f | wc -l)
          SIZE=$(du -sh dist | awk '{print $1}')
          echo "files=$FILES" >> $GITHUB_OUTPUT
          echo "size=$SIZE" >> $GITHUB_OUTPUT

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

      # ====== METADATA ======
      - name: Collect build metadata
        id: meta_build
        shell: bash
        run: |
          AUTHOR_NAME="${{ github.event.head_commit.author.name || '' }}"
          AUTHOR_EMAIL="${{ github.event.head_commit.author.email || '' }}"
          COMMIT_MSG="${{ github.event.head_commit.message || 'Manual dispatch / No head_commit' }}"
          TRIGGERED_BY="${{ github.event.pusher.name || github.actor }}"
          BRANCH="${GITHUB_REF#refs/heads/}"
          REPO="${{ github.repository }}"
          SHA="${{ github.sha }}"
          SHA_SHORT="${SHA:0:7}"
          COMMIT_URL="${{ github.server_url }}/${REPO}/commit/${SHA}"
          RUN_URL="${{ github.server_url }}/${REPO}/actions/runs/${{ github.run_id }}"
          AVATAR_URL="https://github.com/${{ github.actor }}.png?size=96"
          # changes (top 10)
          CHANGES="$(git log --pretty=format:'- %s' ${{ github.event.before }}..${{ github.sha }} | head -n 10)"
          {
            echo "author_name=$AUTHOR_NAME"
            echo "author_email=$AUTHOR_EMAIL"
            echo "commit_msg=$COMMIT_MSG"
            echo "triggered_by=$TRIGGERED_BY"
            echo "branch=$BRANCH"
            echo "repo=$REPO"
            echo "sha_short=$SHA_SHORT"
            echo "commit_url=$COMMIT_URL"
            echo "run_url=$RUN_URL"
            echo "avatar_url=$AVATAR_URL"
            echo "changes<<EOF"
            echo "${CHANGES}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Duration
        id: t1
        run: |
          START=${{ steps.t0.outputs.epoch }}
          END=$(date +%s)
          echo "seconds=$((END-START))" >> $GITHUB_OUTPUT

      - name: Job Summary (Build)
        run: |
          {
            echo "## üõ†Ô∏è Build Summary"
            echo "- **Repo**: \`${{ steps.meta_build.outputs.repo }}\`"
            echo "- **Branch**: \`${{ steps.meta_build.outputs.branch }}\`"
            echo "- **Commit**: \`${{ steps.meta_build.outputs.sha_short }}\` ‚Äì ${{ steps.meta_build.outputs.commit_msg }}"
            echo "- **By**: \`${{ steps.meta_build.outputs.triggered_by }}\`"
            echo "- **Dist**: \`${{ steps.distinfo.outputs.files }}\` files ‚Ä¢ \`${{ steps.distinfo.outputs.size }}\`"
            echo "- **Duration**: \`${{ steps.t1.outputs.seconds }}s\`"
            echo ""
            echo "### Changes (top 10)"
            echo '```'
            echo "${{ steps.meta_build.outputs.changes }}"
            echo '```'
          } >> $GITHUB_STEP_SUMMARY

      # ====== Notify MM: BUILD SUCCESS ======
      - name: Notify Mattermost (build success)
        if: success()
        env:
          WEBHOOK: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          MM_CHANNEL: ${{ secrets.MM_CHANNEL }}
        run: |
          TITLE="‚úÖ Build th√†nh c√¥ng (GitHub Pages)"
          COLOR="#2ecc71"
          EMOJI=":hammer_and_wrench:"
          NOW="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          jq -n \
            --arg title "$TITLE" \
            --arg channel "$MM_CHANNEL" \
            --arg emoji "$EMOJI" \
            --arg color "$COLOR" \
            --arg repo "${{ steps.meta_build.outputs.repo }}" \
            --arg branch "${{ steps.meta_build.outputs.branch }}" \
            --arg sha "${{ steps.meta_build.outputs.sha_short }}" \
            --arg commit_url "${{ steps.meta_build.outputs.commit_url }}" \
            --arg run_url "${{ steps.meta_build.outputs.run_url }}" \
            --arg author "${{ steps.meta_build.outputs.author_name }} <${{ steps.meta_build.outputs.author_email }}>" \
            --arg triggered_by "${{ steps.meta_build.outputs.triggered_by }}" \
            --arg commit_msg "${{ steps.meta_build.outputs.commit_msg }}" \
            --arg dist_size "${{ steps.distinfo.outputs.size }}" \
            --arg dist_files "${{ steps.distinfo.outputs.files }}" \
            --arg duration "${{ steps.t1.outputs.seconds }}s" \
            --arg avatar "${{ steps.meta_build.outputs.avatar_url }}" \
          '{
            username: "GoldOne CI/CD",
            icon_emoji: ":octocat:",
            channel: ($channel // empty),
            attachments: [{
              fallback: $title,
              color: $color,
              pretext: ($emoji + " " + $title),
              thumb_url: $avatar,
              fields: [
                { title: "Repo", short: true, value: $repo },
                { title: "Branch", short: true, value: $branch },
                { title: "Commit", short: false, value: ("`\($sha)` ‚Äì " + $commit_msg) },
                { title: "T√°c gi·∫£ commit", short: true, value: $author },
                { title: "Ng∆∞·ªùi build", short: true, value: $triggered_by },
                { title: "Dist", short: true, value: ($dist_files + " files ‚Ä¢ " + $dist_size) },
                { title: "Duration", short: true, value: $duration },
                { title: "Link Commit", short: false, value: $commit_url },
                { title: "Run Logs", short: false, value: $run_url }
              ],
              footer: "GoldOne Frontend ‚Ä¢ Build",
              ts: (now | floor)
            }]
          }' > payload.json
          curl -sS -H "Content-Type: application/json" -X POST "$WEBHOOK" -d @payload.json

      # ====== Notify MM: BUILD FAILED ======
      - name: Notify Mattermost (build failed)
        if: failure()
        env:
          WEBHOOK: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          MM_CHANNEL: ${{ secrets.MM_CHANNEL }}
        run: |
          TITLE="‚ùå Build th·∫•t b·∫°i (GitHub Pages)"
          COLOR="#e74c3c"
          EMOJI=":x:"
          NOW="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          jq -n \
            --arg title "$TITLE" \
            --arg channel "$MM_CHANNEL" \
            --arg emoji "$EMOJI" \
            --arg color "$COLOR" \
            --arg repo "${{ steps.meta_build.outputs.repo }}" \
            --arg branch "${{ steps.meta_build.outputs.branch }}" \
            --arg sha "${{ steps.meta_build.outputs.sha_short }}" \
            --arg commit_url "${{ steps.meta_build.outputs.commit_url }}" \
            --arg run_url "${{ steps.meta_build.outputs.run_url }}" \
            --arg author "${{ steps.meta_build.outputs.author_name }} <${{ steps.meta_build.outputs.author_email }}>" \
            --arg triggered_by "${{ steps.meta_build.outputs.triggered_by }}" \
            --arg commit_msg "${{ steps.meta_build.outputs.commit_msg }}" \
          '{
            username: "GoldOne CI/CD",
            icon_emoji: ":octocat:",
            channel: ($channel // empty),
            attachments: [{
              fallback: $title,
              color: $color,
              pretext: ($emoji + " " + $title),
              fields: [
                { title: "Repo", short: true, value: $repo },
                { title: "Branch", short: true, value: $branch },
                { title: "Commit", short: true, value: ("`\($sha)` ‚Äì " + $commit_msg) },
                { title: "T√°c gi·∫£ commit", short: true, value: $author },
                { title: "Ng∆∞·ªùi build", short: true, value: $triggered_by },
                { title: "Link Commit", short: false, value: $commit_url },
                { title: "Run Logs", short: false, value: $run_url }
              ],
              footer: "GoldOne Frontend ‚Ä¢ Build",
              ts: (now | floor)
            }]
          }' > payload.json
          curl -sS -H "Content-Type: application/json" -X POST "$WEBHOOK" -d @payload.json

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Start timer
        id: d0
        run: echo "epoch=$(date +%s)" >> $GITHUB_OUTPUT

      - id: deployment
        uses: actions/deploy-pages@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # ====== METADATA DEPLOY ======
      - name: Collect deploy metadata
        id: meta_deploy
        shell: bash
        run: |
          AUTHOR_NAME="${{ github.event.head_commit.author.name || '' }}"
          AUTHOR_EMAIL="${{ github.event.head_commit.author.email || '' }}"
          COMMIT_MSG="${{ github.event.head_commit.message || 'Manual dispatch / No head_commit' }}"
          TRIGGERED_BY="${{ github.event.pusher.name || github.actor }}"
          BRANCH="${GITHUB_REF#refs/heads/}"
          REPO="${{ github.repository }}"
          SHA="${{ github.sha }}"
          SHA_SHORT="${SHA:0:7}"
          COMMIT_URL="${{ github.server_url }}/${REPO}/commit/${SHA}"
          RUN_URL="${{ github.server_url }}/${REPO}/actions/runs/${{ github.run_id }}"
          PAGE_URL="${{ steps.deployment.outputs.page_url }}"
          AVATAR_URL="https://github.com/${{ github.actor }}.png?size=96"
          {
            echo "author_name=$AUTHOR_NAME"
            echo "author_email=$AUTHOR_EMAIL"
            echo "commit_msg=$COMMIT_MSG"
            echo "triggered_by=$TRIGGERED_BY"
            echo "branch=$BRANCH"
            echo "repo=$REPO"
            echo "sha_short=$SHA_SHORT"
            echo "commit_url=$COMMIT_URL"
            echo "run_url=$RUN_URL"
            echo "page_url=$PAGE_URL"
            echo "avatar_url=$AVATAR_URL"
          } >> "$GITHUB_OUTPUT"

      - name: Duration
        id: d1
        run: |
          START=${{ steps.d0.outputs.epoch }}
          END=$(date +%s)
          echo "seconds=$((END-START))" >> $GITHUB_OUTPUT

      - name: Job Summary (Deploy)
        run: |
          {
            echo "## üöÄ Deploy Summary"
            echo "- **Repo**: \`${{ steps.meta_deploy.outputs.repo }}\`"
            echo "- **Branch**: \`${{ steps.meta_deploy.outputs.branch }}\`"
            echo "- **Commit**: \`${{ steps.meta_deploy.outputs.sha_short }}\` ‚Äì ${{ steps.meta_deploy.outputs.commit_msg }}"
            echo "- **Page URL**: ${{ steps.meta_deploy.outputs.page_url }}"
            echo "- **By**: \`${{ steps.meta_deploy.outputs.triggered_by }}\`"
            echo "- **Duration**: \`${{ steps.d1.outputs.seconds }}s\`"
          } >> $GITHUB_STEP_SUMMARY

      # ====== Notify MM: DEPLOY SUCCESS ======
      - name: Notify Mattermost (deploy success)
        if: success()
        env:
          WEBHOOK: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          MM_CHANNEL: ${{ secrets.MM_CHANNEL }}
        run: |
          TITLE="‚úÖ Deploy GitHub Pages th√†nh c√¥ng"
          COLOR="#2ecc71"
          EMOJI=":rocket:"
          NOW="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          jq -n \
            --arg title "$TITLE" \
            --arg channel "$MM_CHANNEL" \
            --arg emoji "$EMOJI" \
            --arg color "$COLOR" \
            --arg repo "${{ steps.meta_deploy.outputs.repo }}" \
            --arg branch "${{ steps.meta_deploy.outputs.branch }}" \
            --arg sha "${{ steps.meta_deploy.outputs.sha_short }}" \
            --arg commit_url "${{ steps.meta_deploy.outputs.commit_url }}" \
            --arg run_url "${{ steps.meta_deploy.outputs.run_url }}" \
            --arg author "${{ steps.meta_deploy.outputs.author_name }} <${{ steps.meta_deploy.outputs.author_email }}>" \
            --arg triggered_by "${{ steps.meta_deploy.outputs.triggered_by }}" \
            --arg commit_msg "${{ steps.meta_deploy.outputs.commit_msg }}" \
            --arg page_url "${{ steps.deployment.outputs.page_url || steps.meta_deploy.outputs.page_url }}" \
            --arg duration "${{ steps.d1.outputs.seconds }}s" \
            --arg avatar "${{ steps.meta_deploy.outputs.avatar_url }}" \
          '{
            username: "GoldOne CI/CD",
            icon_emoji: ":globe_with_meridians:",
            channel: ($channel // empty),
            attachments: [{
              fallback: $title,
              color: $color,
              pretext: ($emoji + " " + $title),
              thumb_url: $avatar,
              fields: [
                { title: "Repo", short: true, value: $repo },
                { title: "Branch", short: true, value: $branch },
                { title: "Commit", short: false, value: ("`\($sha)` ‚Äì " + $commit_msg) },
                { title: "T√°c gi·∫£ commit", short: true, value: $author },
                { title: "Ng∆∞·ªùi deploy", short: true, value: $triggered_by },
                { title: "Page URL", short: false, value: ($page_url // "N/A") },
                { title: "Link Commit", short: false, value: $commit_url },
                { title: "Run Logs", short: false, value: $run_url },
                { title: "Duration", short: true, value: $duration }
              ],
              footer: "GoldOne Frontend ‚Ä¢ Deploy",
              ts: (now | floor)
            }]
          }' > payload.json
          curl -sS -H "Content-Type: application/json" -X POST "$WEBHOOK" -d @payload.json

      # ====== Notify MM: DEPLOY FAILED ======
      - name: Notify Mattermost (deploy failed)
        if: failure()
        env:
          WEBHOOK: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          MM_CHANNEL: ${{ secrets.MM_CHANNEL }}
        run: |
          TITLE="‚ùå Deploy GitHub Pages th·∫•t b·∫°i"
          COLOR="#e74c3c"
          EMOJI=":fire:"
          NOW="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          jq -n \
            --arg title "$TITLE" \
            --arg channel "$MM_CHANNEL" \
            --arg emoji "$EMOJI" \
            --arg color "$COLOR" \
            --arg repo "${{ steps.meta_deploy.outputs.repo }}" \
            --arg branch "${{ steps.meta_deploy.outputs.branch }}" \
            --arg sha "${{ steps.meta_deploy.outputs.sha_short }}" \
            --arg commit_url "${{ steps.meta_deploy.outputs.commit_url }}" \
            --arg run_url "${{ steps.meta_deploy.outputs.run_url }}" \
            --arg author "${{ steps.meta_deploy.outputs.author_name }} <${{ steps.meta_deploy.outputs.author_email }}>" \
            --arg triggered_by "${{ steps.meta_deploy.outputs.triggered_by }}" \
            --arg commit_msg "${{ steps.meta_deploy.outputs.commit_msg }}" \
          '{
            username: "GoldOne CI/CD",
            icon_emoji: ":warning:",
            channel: ($channel // empty),
            attachments: [{
              fallback: $title,
              color: $color,
              pretext: ($emoji + " " + $title),
              fields: [
                { title: "Repo", short: true, value: $repo },
                { title: "Branch", short: true, value: $branch },
                { title: "Commit", short: true, value: ("`\($sha)` ‚Äì " + $commit_msg) },
                { title: "T√°c gi·∫£ commit", short: true, value: $author },
                { title: "Ng∆∞·ªùi deploy", short: true, value: $triggered_by },
                { title: "Link Commit", short: false, value: $commit_url },
                { title: "Run Logs", short: false, value: $run_url }
              ],
              footer: "GoldOne Frontend ‚Ä¢ Deploy",
              ts: (now | floor)
            }]
          }' > payload.json
          curl -sS -H "Content-Type: application/json" -X POST "$WEBHOOK" -d @payload.json
