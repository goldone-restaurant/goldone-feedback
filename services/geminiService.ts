import { GoogleGenAI, Type } from "@google/genai";
import type { FeedbackData, GeminiAnalysis } from '../types';
import axios from "axios";
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

// Helper function to convert a File object to a GoogleGenerativeAI.Part object.
async function fileToGenerativePart(file: File) {
  const base64EncodedDataPromise = new Promise<string>((resolve) => {
    const reader = new FileReader();
    reader.onloadend = () => resolve((reader.result as string).split(',')[1]);
    reader.readAsDataURL(file);
  });
  return {
    inlineData: { data: await base64EncodedDataPromise, mimeType: file.type },
  };
}
const MATTERMOST_WEBHOOK = "https://chat.goldone.vn/hooks/hjakns5xh3d3d8wnuqrgywck4o"; // Ho·∫∑c import.meta.env.VITE_MATTERMOST_WEBHOOK

function stars(n?: number) {
    if (!n || n <= 0) return "Kh√¥ng ƒë√°nh gi√°";
    const v = Math.max(1, Math.min(5, Math.round(n)));
    return `${v}/5 ‚≠ê`;
}

function buildPayload(form: FeedbackData, analysis: GeminiAnalysis) {
    const emoji =
        analysis?.sentiment === "T√≠ch c·ª±c" ? "üü¢" :
            analysis?.sentiment === "Ti√™u c·ª±c" ? "üî¥" : "üü°";

    const keywords =
        Array.isArray(analysis?.keywords) && analysis.keywords.length
            ? analysis.keywords.join(", ")
            : "‚Äî";

    // 1) Gom ph√†n n√†n c√≥ n·ªôi dung
    const complaints: Array<{ label: string; text: string }> = [];
    if (form.foodComplaint?.trim())      complaints.push({ label: "M√≥n ƒÉn",    text: form.foodComplaint.trim() });
    if (form.serviceComplaint?.trim())   complaints.push({ label: "Ph·ª•c v·ª•",   text: form.serviceComplaint.trim() });
    if (form.ambianceComplaint?.trim())  complaints.push({ label: "Kh√¥ng gian", text: form.ambianceComplaint.trim() });

    // 2) X√°c ƒë·ªãnh rating th·∫•p (<=2) ƒë·ªÉ highlight
    const lowRatings: string[] = [];
    if (form.foodQuality > 0 && form.foodQuality <= 2)    lowRatings.push(`M√≥n ƒÉn: ${form.foodQuality}/5`);
    if (form.service > 0 && form.service <= 2)            lowRatings.push(`Ph·ª•c v·ª•: ${form.service}/5`);
    if (form.ambiance > 0 && form.ambiance <= 2)          lowRatings.push(`Kh√¥ng gian: ${form.ambiance}/5`);

    // 3) Chu·∫©n b·ªã text d·∫°ng diff ƒë·ªÉ c√°c d√≤ng c·∫ßn ch√∫ √Ω hi·ªán m√†u ƒë·ªè
    //    (tr√™n h·∫ßu h·∫øt theme Mattermost: ti·ªÅn t·ªë "-" trong ```diff s·∫Ω xu·∫•t hi·ªán n·ªïi b·∫≠t)
    const complaintsDiff = complaints.length
        ? ["```diff", ...complaints.map(c => `- ${c.label}: ${c.text}`), "```"].join("\n")
        : "";

    const lowRatingsDiff = lowRatings.length
        ? ["```diff", ...lowRatings.map(line => `- ƒêi·ªÉm th·∫•p ‚Ä¢ ${line}`), "```"].join("\n")
        : "";

    // 4) Attachment ch√≠nh (t·ªïng quan)
    const mainAttachment: any = {
        color:
            analysis?.sentiment === "T√≠ch c·ª±c" ? "#2ECC71" :
                analysis?.sentiment === "Ti√™u c·ª±c" ? "#E74C3C" : "#F1C40F",
        fields: [
            { title: "Ng√†y gh√© thƒÉm", value: form.visitDate || "‚Äî", short: true },
            { title: "Ph√≤ng", value: (form as any).roomNumber || "‚Äî", short: true },
            { title: "SƒêT", value: form.phoneNumber || "‚Äî", short: true },
            {
                title: "Gi·ªõi thi·ªáu b·∫°n b√®",
                value: form.recommend == null ? "Ch∆∞a tr·∫£ l·ªùi" : (form.recommend ? "C√≥" : "Kh√¥ng"),
                short: true
            },

            { title: "M√≥n ƒÉn", value: stars(form.foodQuality), short: true },
            { title: "Ph·ª•c v·ª•", value: stars(form.service), short: true },
            { title: "Kh√¥ng gian", value: stars(form.ambiance), short: true },

            { title: "C·∫£m x√∫c AI ph√¢n t√≠ch", value: analysis?.sentiment ?? "‚Äî", short: true },
            { title: "T·ª´ kh√≥a ch√≠nh", value: keywords, short: false },
            { title: "T√≥m t·∫Øt AI", value: analysis?.summary ?? "‚Äî", short: false },

            // G·∫Øn c·ªù ·ªü attachment ch√≠nh ƒë·ªÉ ng∆∞·ªùi xem bi·∫øt c√≥ ph·∫ßn c·∫ßn ch√∫ √Ω b√™n d∆∞·ªõi
            ...(lowRatings.length
                ? [{ title: "‚ö†Ô∏è ƒêi·ªÉm th·∫•p", value: "**Vui l√≤ng xem m·ª•c N·ªîI B·∫¨T b√™n d∆∞·ªõi**", short: false }]
                : []),
            ...(complaints.length
                ? [{ title: "üö® C√≥ ph√†n n√†n", value: "**Vui l√≤ng xem m·ª•c N·ªîI B·∫¨T b√™n d∆∞·ªõi**", short: false }]
                : []),
        ],
    };

    // 5) Attachment N·ªîI B·∫¨T: gom t·∫•t c·∫£ c·∫£nh b√°o/ƒëi·ªÉm th·∫•p/ph√†n n√†n v√†o kh·ªëi ri√™ng, n·ªÅn ƒë·ªè
    const highlightAttachment =
        complaints.length || lowRatings.length
            ? {
                color: "#E74C3C", // ƒë·ªè ƒë·∫≠m, g√¢y ch√∫ √Ω
                title: "üî• N·ªîI B·∫¨T ‚Äì C·∫ßn x·ª≠ l√Ω s·ªõm",
                // d√πng 'text' ƒë·ªÉ render markdown t·ªët h∆°n
                text: [
                    lowRatingsDiff,            // c√°c ƒëi·ªÉm rating th·∫•p (ƒë·ªè)
                    complaintsDiff,            // c√°c ph√†n n√†n (ƒë·ªè)
                    analysis?.sentiment === "Ti√™u c·ª±c" ? "\n**∆ØU TI√äN CAO**: *Ti√™u c·ª±c*, c·∫ßn li√™n h·ªá kh√°ch s·ªõm." : ""
                ]
                    .filter(Boolean)
                    .join("\n"),
            }
            : null;

    // 6) Tr·∫£ payload cu·ªëi
    return {
        username: "test-automation",
        text: `${emoji} *Feedback m·ªõi nh·∫≠n!* @channel`,
        attachments: highlightAttachment
            ? [mainAttachment, highlightAttachment]   // kh·ªëi ch√≠nh + kh·ªëi n·ªïi b·∫≠t
            : [mainAttachment],
    };
}

export async function sendToChat(form: FeedbackData, analysis: GeminiAnalysis) {
    if (!MATTERMOST_WEBHOOK) {
        console.error("‚ùå Thi·∫øu MATTERMOST_WEBHOOK");
        return;
    }

    const payload = buildPayload(form, analysis);

    try {
        await axios.post(MATTERMOST_WEBHOOK, payload, {
            headers: { "Content-Type": "application/json" },
            timeout: 8000,
        });
        console.log("‚úÖ ƒê√£ g·ª≠i feedback l√™n Mattermost");
    } catch (err: any) {
        console.error("‚ùå G·ª≠i webhook th·∫•t b·∫°i:", err?.response?.status, err?.message);
    }
}

export const analyzeFeedback = async (feedback: FeedbackData): Promise<GeminiAnalysis> => {
    
    const formatRating = (rating: number) => rating > 0 ? `${rating}` : 'Kh√¥ng ƒë√°nh gi√°';

    let prompt = `
    Ph√¢n t√≠ch ph·∫£n h·ªìi sau t·ª´ m·ªôt kh√°ch h√†ng c·ªßa nh√† h√†ng h·∫£i s·∫£n.
    - Ch·∫•t l∆∞·ª£ng m√≥n ƒÉn (1-5 sao): ${formatRating(feedback.foodQuality)}
    - Ch·∫•t l∆∞·ª£ng ph·ª•c v·ª• (1-5 sao): ${formatRating(feedback.service)}
    - Kh√¥ng gian nh√† h√†ng (1-5 sao): ${formatRating(feedback.ambiance)}
    - Ng√†y gh√© thƒÉm: ${feedback.visitDate}
    - Ph√≤ng (n·∫øu c√≥): ${(feedback as any).roomNumber || 'Kh√¥ng cung c·∫•p.'}
    - S·ªë ƒëi·ªán tho·∫°i: ${feedback.phoneNumber || 'Kh√¥ng cung c·∫•p.'}`;

    if (feedback.foodComplaint) {
        prompt += `\n- Ph√†n n√†n c·ª• th·ªÉ v·ªÅ m√≥n ƒÉn: "${feedback.foodComplaint}"`
    }
    if (feedback.serviceComplaint) {
        prompt += `\n- Ph√†n n√†n c·ª• th·ªÉ v·ªÅ ph·ª•c v·ª•: "${feedback.serviceComplaint}"`
    }
    if (feedback.ambianceComplaint) {
        prompt += `\n- Ph√†n n√†n c·ª• th·ªÉ v·ªÅ kh√¥ng gian: "${feedback.ambianceComplaint}"`
    }

    if (feedback.receiptImage) {
        prompt += `\n- Ghi ch√∫: Kh√°ch h√†ng ƒë√£ ƒë√≠nh k√®m h√¨nh ·∫£nh h√≥a ƒë∆°n. H√£y ƒë·ªÅ c·∫≠p ƒë·∫øn vi·ªác n√†y trong b·∫£n t√≥m t·∫Øt n·∫øu c√≥ li√™n quan.`;
    }

    prompt += `

    D·ª±a v√†o th√¥ng tin tr√™n, h√£y cung c·∫•p:
    1.  M·ªôt b·∫£n t√≥m t·∫Øt ng·∫Øn g·ªçn (t·ªëi ƒëa 30 t·ª´) v·ªÅ tr·∫£i nghi·ªám c·ªßa kh√°ch h√†ng, ƒë·∫∑c bi·ªát ch√∫ √Ω ƒë·∫øn ph√†n n√†n n·∫øu c√≥.
    2.  Ph√¢n lo·∫°i c·∫£m x√∫c chung l√† "T√≠ch c·ª±c", "Ti√™u c·ª±c", ho·∫∑c "Trung t√≠nh".
    3.  Li·ªát k√™ 3-5 t·ª´ kh√≥a ch√≠nh n·ªïi b·∫≠t nh·∫•t t·ª´ ph·∫£n h·ªìi.
    `;
    
    const responseSchema = {
      type: Type.OBJECT,
      properties: {
        summary: {
          type: Type.STRING,
          description: "T√≥m t·∫Øt ng·∫Øn g·ªçn ph·∫£n h·ªìi."
        },
        sentiment: {
          type: Type.STRING,
          enum: ["T√≠ch c·ª±c", "Ti√™u c·ª±c", "Trung t√≠nh"],
          description: "C·∫£m x√∫c chung c·ªßa ph·∫£n h·ªìi."
        },
        keywords: {
          type: Type.ARRAY,
          items: {
            type: Type.STRING
          },
          description: "C√°c t·ª´ kh√≥a ch√≠nh t·ª´ ph·∫£n h·ªìi."
        }
      },
      required: ["summary", "sentiment", "keywords"]
    };

    try {
        const model = "gemini-2.5-flash";
        const config = {
            responseMimeType: "application/json",
            responseSchema: responseSchema,
            temperature: 0.2,
        };
        
        let contents;
        if (feedback.receiptImage) {
            const imagePart = await fileToGenerativePart(feedback.receiptImage);
            const textPart = { text: prompt };
            contents = { parts: [textPart, imagePart] };
        } else {
            contents = prompt;
        }

        const response = await ai.models.generateContent({
            model,
            contents,
            config,
        });

        const jsonText = response.text.trim();
        const analysisResult: GeminiAnalysis = JSON.parse(jsonText);
        
        return analysisResult;

    } catch (error) {
        console.error("Error analyzing feedback with Gemini:", error);
        throw new Error("Kh√¥ng th·ªÉ ph√¢n t√≠ch ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i.");
    }
};