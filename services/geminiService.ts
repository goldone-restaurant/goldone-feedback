import { GoogleGenAI, Type } from "@google/genai";
import type { FeedbackData, GeminiAnalysis } from '../types';
import axios from "axios";
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

// Helper function to convert a File object to a GoogleGenerativeAI.Part object.
async function fileToGenerativePart(file: File) {
  const base64EncodedDataPromise = new Promise<string>((resolve) => {
    const reader = new FileReader();
    reader.onloadend = () => resolve((reader.result as string).split(',')[1]);
    reader.readAsDataURL(file);
  });
  return {
    inlineData: { data: await base64EncodedDataPromise, mimeType: file.type },
  };
}
const MATTERMOST_WEBHOOK = "https://chat.goldone.vn/hooks/hjakns5xh3d3d8wnuqrgywck4o"; // Ho·∫∑c import.meta.env.VITE_MATTERMOST_WEBHOOK

function stars(n?: number) {
    if (!n || n <= 0) return "Kh√¥ng ƒë√°nh gi√°";
    const v = Math.max(1, Math.min(5, Math.round(n)));
    return `${v}/5 ‚≠ê`;
}

function buildPayload(form: FeedbackData, analysis: GeminiAnalysis) {
    const emoji =
        analysis?.sentiment === "T√≠ch c·ª±c" ? "üü¢" :
            analysis?.sentiment === "Ti√™u c·ª±c" ? "üî¥" : "üü°";

    const keywords = Array.isArray(analysis?.keywords) && analysis.keywords.length
        ? analysis.keywords.join(", ")
        : "‚Äî";

    return {
        username: "test-automation",
        text: `${emoji} *Feedback m·ªõi nh·∫≠n!* @channel`,
        attachments: [
            {
                color:
                    analysis?.sentiment === "T√≠ch c·ª±c" ? "#2ECC71" :
                        analysis?.sentiment === "Ti√™u c·ª±c" ? "#E74C3C" : "#F1C40F",
                fields: [
                    { title: "Ng√†y gh√© thƒÉm", value: form.visitDate || "‚Äî", short: true },
                    { title: "Ph√≤ng", value: (form as any).roomNumber || "‚Äî", short: true },
                    { title: "SƒêT", value: form.phoneNumber || "‚Äî", short: true },
                    { title: "Gi·ªõi thi·ªáu b·∫°n b√®", value: form.recommend == null ? "Ch∆∞a tr·∫£ l·ªùi" : (form.recommend ? "C√≥" : "Kh√¥ng"), short: true },

                    { title: "M√≥n ƒÉn", value: stars(form.foodQuality), short: true },
                    { title: "Ph·ª•c v·ª•", value: stars(form.service), short: true },
                    { title: "Kh√¥ng gian", value: stars(form.ambiance), short: true },

                    { title: "C·∫£m x√∫c AI ph√¢n t√≠ch", value: analysis?.sentiment ?? "‚Äî", short: true },
                    { title: "T·ª´ kh√≥a ch√≠nh", value: keywords, short: false },
                    { title: "T√≥m t·∫Øt AI", value: analysis?.summary ?? "‚Äî", short: false },
                    { title: "B√¨nh lu·∫≠n", value: (form.comments || "‚Äî").trim(), short: false },

                    ...(form.foodComplaint ? [{ title: "Ph√†n n√†n m√≥n ƒÉn", value: form.foodComplaint, short: false }] : []),
                    ...(form.serviceComplaint ? [{ title: "Ph√†n n√†n ph·ª•c v·ª•", value: form.serviceComplaint, short: false }] : []),
                    ...(form.ambianceComplaint ? [{ title: "Ph√†n n√†n kh√¥ng gian", value: form.ambianceComplaint, short: false }] : []),
                ],
            },
        ],
    };
}

export async function sendToChat(form: FeedbackData, analysis: GeminiAnalysis) {
    if (!MATTERMOST_WEBHOOK) {
        console.error("‚ùå Thi·∫øu MATTERMOST_WEBHOOK");
        return;
    }

    const payload = buildPayload(form, analysis);

    try {
        await axios.post(MATTERMOST_WEBHOOK, payload, {
            headers: { "Content-Type": "application/json" },
            timeout: 8000,
        });
        console.log("‚úÖ ƒê√£ g·ª≠i feedback l√™n Mattermost");
    } catch (err: any) {
        console.error("‚ùå G·ª≠i webhook th·∫•t b·∫°i:", err?.response?.status, err?.message);
    }
}

export const analyzeFeedback = async (feedback: FeedbackData): Promise<GeminiAnalysis> => {
    
    const formatRating = (rating: number) => rating > 0 ? `${rating}` : 'Kh√¥ng ƒë√°nh gi√°';

    let prompt = `
    Ph√¢n t√≠ch ph·∫£n h·ªìi sau t·ª´ m·ªôt kh√°ch h√†ng c·ªßa nh√† h√†ng h·∫£i s·∫£n.
    - Ch·∫•t l∆∞·ª£ng m√≥n ƒÉn (1-5 sao): ${formatRating(feedback.foodQuality)}
    - Ch·∫•t l∆∞·ª£ng ph·ª•c v·ª• (1-5 sao): ${formatRating(feedback.service)}
    - Kh√¥ng gian nh√† h√†ng (1-5 sao): ${formatRating(feedback.ambiance)}
    - Ng√†y gh√© thƒÉm: ${feedback.visitDate}
    - S·∫Ω gi·ªõi thi·ªáu cho b·∫°n b√®: ${feedback.recommend === null ? 'Ch∆∞a tr·∫£ l·ªùi' : feedback.recommend ? 'C√≥' : 'Kh√¥ng'}
    - S·ªë ƒëi·ªán tho·∫°i: ${feedback.phoneNumber || 'Kh√¥ng cung c·∫•p.'}`;

    if (feedback.foodComplaint) {
        prompt += `\n- Ph√†n n√†n c·ª• th·ªÉ v·ªÅ m√≥n ƒÉn: "${feedback.foodComplaint}"`
    }
    if (feedback.serviceComplaint) {
        prompt += `\n- Ph√†n n√†n c·ª• th·ªÉ v·ªÅ ph·ª•c v·ª•: "${feedback.serviceComplaint}"`
    }
    if (feedback.ambianceComplaint) {
        prompt += `\n- Ph√†n n√†n c·ª• th·ªÉ v·ªÅ kh√¥ng gian: "${feedback.ambianceComplaint}"`
    }

    prompt += `\n- B√¨nh lu·∫≠n chung: "${feedback.comments || 'Kh√¥ng c√≥ b√¨nh lu·∫≠n.'}"`;

    if (feedback.receiptImage) {
        prompt += `\n- Ghi ch√∫: Kh√°ch h√†ng ƒë√£ ƒë√≠nh k√®m h√¨nh ·∫£nh h√≥a ƒë∆°n. H√£y ƒë·ªÅ c·∫≠p ƒë·∫øn vi·ªác n√†y trong b·∫£n t√≥m t·∫Øt n·∫øu c√≥ li√™n quan.`;
    }

    prompt += `

    D·ª±a v√†o th√¥ng tin tr√™n, h√£y cung c·∫•p:
    1.  M·ªôt b·∫£n t√≥m t·∫Øt ng·∫Øn g·ªçn (t·ªëi ƒëa 30 t·ª´) v·ªÅ tr·∫£i nghi·ªám c·ªßa kh√°ch h√†ng, ƒë·∫∑c bi·ªát ch√∫ √Ω ƒë·∫øn ph√†n n√†n n·∫øu c√≥.
    2.  Ph√¢n lo·∫°i c·∫£m x√∫c chung l√† "T√≠ch c·ª±c", "Ti√™u c·ª±c", ho·∫∑c "Trung t√≠nh".
    3.  Li·ªát k√™ 3-5 t·ª´ kh√≥a ch√≠nh n·ªïi b·∫≠t nh·∫•t t·ª´ ph·∫£n h·ªìi.
    `;
    
    const responseSchema = {
      type: Type.OBJECT,
      properties: {
        summary: {
          type: Type.STRING,
          description: "T√≥m t·∫Øt ng·∫Øn g·ªçn ph·∫£n h·ªìi."
        },
        sentiment: {
          type: Type.STRING,
          enum: ["T√≠ch c·ª±c", "Ti√™u c·ª±c", "Trung t√≠nh"],
          description: "C·∫£m x√∫c chung c·ªßa ph·∫£n h·ªìi."
        },
        keywords: {
          type: Type.ARRAY,
          items: {
            type: Type.STRING
          },
          description: "C√°c t·ª´ kh√≥a ch√≠nh t·ª´ ph·∫£n h·ªìi."
        }
      },
      required: ["summary", "sentiment", "keywords"]
    };

    try {
        const model = "gemini-2.5-flash";
        const config = {
            responseMimeType: "application/json",
            responseSchema: responseSchema,
            temperature: 0.2,
        };
        
        let contents;
        if (feedback.receiptImage) {
            const imagePart = await fileToGenerativePart(feedback.receiptImage);
            const textPart = { text: prompt };
            contents = { parts: [textPart, imagePart] };
        } else {
            contents = prompt;
        }

        const response = await ai.models.generateContent({
            model,
            contents,
            config,
        });

        const jsonText = response.text.trim();
        const analysisResult: GeminiAnalysis = JSON.parse(jsonText);
        
        return analysisResult;

    } catch (error) {
        console.error("Error analyzing feedback with Gemini:", error);
        throw new Error("Kh√¥ng th·ªÉ ph√¢n t√≠ch ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i.");
    }
};